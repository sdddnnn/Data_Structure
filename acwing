//双链表
#include<iostream>
using namespace std;
const int N = 100010;
int e[N], l[N], r[N], idx;
void init()
{
    //0是左端点，1是右端点
    r[0] = 1, l[1] = 0;
    idx = 2;
}
void insert(int a, int x)
{
    e[idx] = x;
    l[idx] = a, r[idx] = r[a];
    l[r[a]] = idx, r[a] = idx++;
}

void remove(int a)
{
    l[r[a]] = l[a];
    r[l[a]] = r[a];
}
int main() {
    int m, k, x;
    string s;
    init();
    cin >> m;
    while (m--)
    {
        cin >> s;
        if (s == "L")
        {
            cin >> x;
            insert(0, x);
        }
        else if (s == "R")
        {
            cin >> x;
                int a = l[1];
                insert(a, x);
        }
        else if (s == "D")
        {
            cin >> k;
            remove(k + 1);
        }
        else if (s == "IL")
        {
            cin >> k >> x;
            insert(l[k+1], x);//无法保证K+1下标值就是第k+1个插入的值的左侧，应当通过指针获取
        }
        else {
            cin >> k >> x;
            insert(k + 1, x);
        }
    }

    for (int i = r[0]; i != 1; i = r[i])
        cout << e[i] << " ";
}


//单链表
#include<iostream>
using namespace std;
const int N=100010;
int head,idx,e[N],ne[N];
void init()
{
    head=-1;
    idx=0;
}
void add_to_head(int x)
{
    e[idx]=x,
    ne[idx]=head,
    head=idx++;
}
void add(int k,int x)
{
    e[idx]=x,
    ne[idx]=ne[k],
    ne[k]=idx++;
}
void remove(int k)
{
    ne[k]=ne[ne[k]];
}
int main()
{
   
   
    int m;
    cin>>m;
    
     init();
    while(m--)
    { char c;
        int k,x;
        cin>>c;
        if(c=='H')
        {     cin>>x;
            add_to_head(x);
        }
        else if(c=='D')
        {
            cin>>k;
            if(!k) head=ne[head];
            else remove(k-1);
        }
        else
        {
        cin>>k>>x;
        add(k-1,x);
        }
    }
    
    for(int i=head;i!=-1;i=ne[i])
    cout<<e[i]<<" ";
}























